#BlueJ class context
comment0.target=Rational
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Rational\ here.\r\n\r\n\ @author\ Johnnie\ Meredith\r\n\ @version\ 1.0\ setpember\ 20\ 2018\ 1125am\r\n
comment1.params=numerator\ denominator
comment1.target=Rational(long,\ long)
comment1.text=\r\n\ Constructor\ objects\ of\ class\ Rational\r\n\ First\ takes\ two\ integers\ as\ arguments\r\n\ Second\ allows\ setting\ of\ numerator\ and\ denominator\ via\ methods\r\n
comment10.params=numer\ denom
comment10.target=Rational\ reduce(long,\ long)
comment11.params=
comment11.target=Rational\ reduce()
comment12.params=r
comment12.target=double\ toDouble(Rational)
comment12.text=\r\n\ TODOUBLE\ methods\ overloaded\r\n\ First\ takes\ a\ rational\ as\ a\ parameter\ and\ returns\ it\ as\ a\ double\r\n\ Second\ takes\ two\ integers(numerator\ and\ denominator)\ and\ returns\ their\ quotient\r\n\ Third\ allows\ you\ to\ return\ the\ double\ value\ of\ a\ Rational\ object\ itself\r\n
comment13.params=numerator\ denominator
comment13.target=double\ toDouble(long,\ long)
comment14.params=
comment14.target=double\ toDouble()
comment15.params=r
comment15.target=int\ compareTo(Rational)
comment16.params=r
comment16.target=java.lang.String\ toString(Rational)
comment16.text=\r\n\ TOSTRING\ methods\ overloaded\r\n\ First\ takes\ a\ Rational\ as\ a\ parameter\ and\ returns\ it\ as\ a\ String\r\n\ Second\ takes\ two\ integers(numerator\ and\ denominator)\ and\ returns\ it\ as\ a\ String\r\n\ Third\ converts\ a\ Rational\ object\ itself\ to\ a\ String\r\n
comment17.params=numerator\ denominator
comment17.target=java.lang.String\ toString(long,\ long)
comment18.params=
comment18.target=java.lang.String\ toString()
comment19.params=r
comment19.target=void\ printRational(Rational)
comment19.text=\r\n\ PRINTRATIONAL\ overloaded\r\n\ Takes\ a\ Rational\ object\ as\ a\ parameter\ and\ prints\ it\ to\ console\ by\ converting\ it\ to\ a\ String\r\n\ First\ takes\ a\ Rational\ as\ a\ parameter\ and\ outputs\ it\ to\ console\ by\ coverting\ it\ to\ a\ String\ an\ printing\ it\r\n\ Second\ prints\ the\ current\ Rational\ object\ by\ converting\ to\ a\ String\ and\ printing\ it\r\n
comment2.params=
comment2.target=Rational()
comment20.params=
comment20.target=void\ printRational()
comment21.params=r
comment21.target=Rational\ negate(Rational)
comment21.text=\r\n\ NEGATE\ method\ overloaded\r\n\ First\ takes\r\n\ Second\ takes\r\n\ Third\ acts\ on\ a\ Rational\ object\ itself\r\n\ \r\n\ \r\n\ Here\ is\ the\ void\ version\ of\ negate\ but\ I\ found\ the\ other\ versions\ more\ useful.\r\n\ public\ void\ negate(){\r\n\ \ \ \ \ this.numerator\ \=\ -1\ +\ this.numerator;\r\n\ }\r\n
comment22.params=numerator\ denominator
comment22.target=Rational\ negate(long,\ long)
comment23.params=
comment23.target=Rational\ negate()
comment24.params=numerator\ denominator
comment24.target=Rational\ invert(long,\ long)
comment24.text=\r\n\ INVERT\ method\ overloaded\r\n\ First\ takes\r\n\ Second\ takes\r\n\ Third\ acts\ on\ a\ Rational\ object\ itself\r\n
comment25.params=r
comment25.target=Rational\ invert(Rational)
comment26.params=
comment26.target=Rational\ invert()
comment27.params=rTemp
comment27.target=long\ greatestCommonDivisor(Rational)
comment27.text=\r\n\ GREATESTCOMMONDIVISOR\ method\ overloaded\r\n\ First\ takes\r\n\ Second\ takes\r\n\ Third\ acts\ on\ a\ Rational\ object\ itself\r\n
comment28.params=numerator\ denominator
comment28.target=long\ greatestCommonDivisor(long,\ long)
comment29.params=
comment29.target=long\ greatestCommonDivisor()
comment3.params=
comment3.target=long\ getNumerator()
comment3.text=\r\n\ GET\ and\ SET\ methods\r\n
comment30.params=r\ p
comment30.target=Rational\ multiply(Rational,\ Rational)
comment30.text=\r\n\ MULTIPLY\ method\ overloaded\r\n\ First\ takes\r\n\ Second\ takes\r\n\ Third\ acts\ on\ a\ Rational\ object\ itself\r\n
comment31.params=num1\ denom1\ num2\ denom2
comment31.target=Rational\ multiply(long,\ long,\ long,\ long)
comment32.params=r
comment32.target=Rational\ multiply(Rational)
comment33.params=r\ p
comment33.target=Rational\ divide(Rational,\ Rational)
comment33.text=\r\n\ DIVIDE\ method\ overloaded\r\n\ First\ takes\r\n\ Second\ takes\r\n\ Third\ acts\ on\ a\ Rational\ object\ itself\r\n
comment34.params=num1\ denom1\ num2\ denom2
comment34.target=Rational\ divide(long,\ long,\ long,\ long)
comment35.params=r
comment35.target=Rational\ divide(Rational)
comment36.params=r\ p
comment36.target=Rational\ add(Rational,\ Rational)
comment36.text=\r\n\ ADD\ method\ overloaded\r\n\ First\ takes\r\n\ Second\ takes\r\n\ Third\ acts\ on\ a\ Rational\ object\ itself\r\n
comment37.params=num1\ denom1\ num2\ denom2
comment37.target=Rational\ add(long,\ long,\ long,\ long)
comment38.params=r
comment38.target=Rational\ add(Rational)
comment39.params=r\ p
comment39.target=Rational\ subtract(Rational,\ Rational)
comment39.text=\r\n\ SUBTRACT\ method\ overloaded\r\n\ First\ takes\r\n\ Second\ takes\r\n\ Third\ acts\ on\ a\ Rational\ object\ itself\r\n
comment4.params=
comment4.target=long\ getDenominator()
comment40.params=num1\ denom1\ num2\ denom2
comment40.target=Rational\ subtract(int,\ int,\ int,\ int)
comment41.params=r
comment41.target=Rational\ subtract(Rational)
comment42.params=r\ p
comment42.target=boolean\ equals(Rational,\ Rational)
comment42.text=\r\n\ EQUALS\ method\ overloaded\r\n\ First\ takes\ two\ rationals\ as\ paramaters\ and\ compares\ the\ second\ to\ the\ first\r\n\ Second\ takes\ a\ second\ Rational\ as\ a\ parameter\ and\ compares\ it\ to\ the\ current\ Rational\ object\ itself\r\n\ Both\ will\ return\ true\ if\ they\ are\ equal\ to\ each\ other\r\n
comment43.params=r
comment43.target=boolean\ equals(Rational)
comment5.params=n
comment5.target=void\ setNumerator(long)
comment6.params=
comment6.target=void\ setNumerator()
comment7.params=d
comment7.target=void\ setDenominator(long)
comment8.params=
comment8.target=void\ setDenominator()
comment9.params=r
comment9.target=Rational\ reduce(Rational)
comment9.text=\r\n\ REDUCE\ methods\ overloaded\r\n\ one\ static\ and\ two\ non-static\ implementations\ all\ with\ different\ passed\ parameters\r\n\ First\ takes\ a\ Rational\ as\ a\ parameter\r\n\ Second\ takes\ two\ integers\ as\ parameters\ for\ numerator\ and\ denominator\r\n\ Third\ allows\ you\ to\ act\ on\ the\ instance\ of\ the\ parameter\ itself\r\n
numComments=44
